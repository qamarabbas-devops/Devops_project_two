name: CI/CD with Terraform
on:
  push:
    branches:
      - testbranch

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
  AWS_SSH_KEY_PRIVATE: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  AWS_SSH_KEY_PUBLIC: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  AWS_REGION: ap-northeast-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{steps.set-ip.outputs.instance_public_ip}}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Initialize Terraform
        id: init
        run: terraform init   -backend-config="bucket=$AWS_TF_STATE_BUCKET_NAME" #-backend-config="ap-northeast-1"
        working-directory: ./terraform

      - name: Plan Terraform
        id: plan
        run: |-
           terraform plan \
           -var="region=ap-northeast-1" \
           -var="public_key=$AWS_SSH_KEY_PUBLIC" \
           -var="private_key=$AWS_SSH_KEY_PUBLIC" \
           -var="key_name=deployer-key" \
           -out=PLAN
        working-directory: ./terraform
      - name: Set outpup
        id: set-ip
        run: |-
          echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"


      - name: Apply Terraform
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set IP env variable
        run: echo SERVER_PUBLIC_IP=${{needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV 
      - name: Login to aws ECR  
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry}}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
        run: |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG .
      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry}}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: ap-northeast-1
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP}}
          username: ubuntu
          key: ${{ env.AWS_SSH_KEY_PRIVATE}}
          envs: AWS_SSH_KEY_PRIVATE,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y 
            sudo $(aws ecr get-login --no-include-email --region ap-northeast-1 );
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true 
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG
            






